# utils.py

import os
import tempfile
import subprocess
from pathlib import Path
import yt_dlp

# Define ffmpeg and ffprobe binary paths
# Update these paths if your deployment environment stores ffmpeg elsewhere
FFMPEG_BIN = "/usr/bin/ffmpeg"
FFPROBE_BIN = "/usr/bin/ffprobe"

# If those binaries are not installed in the environment, you may
# download static builds at runtime and update these paths accordingly.

def download_youtube_audio(url, ffmpeg_path=FFMPEG_BIN):
    """
    Download audio from YouTube URL and convert to mp3 using ffmpeg.
    """
    output_path = tempfile.mktemp(suffix=".mp3")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': output_path,
        'quiet': True,
        'noplaylist': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
            'ffmpeg_location': os.path.dirname(ffmpeg_path),
        }],
        'ffmpeg_location': os.path.dirname(ffmpeg_path),
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    return output_path


def run_demucs(audio_path, model='htdemucs', device='cpu'):
    """
    Run Demucs to separate stems from audio file.

    Args:
        audio_path (str): Path to input audio file.
        model (str): Demucs model to use.
        device (str): 'cpu' or 'cuda'.

    Returns:
        str: Path to output directory with separated stems.
    """
    output_dir = tempfile.mkdtemp()
    command = [
        "python", "-m", "demucs",
        "--model", model,
        "--out", output_dir,
        "--device", device,
        audio_path
    ]

    # Optional: If using htdemucs, separate two stems (vocals + accompaniment)
    if model == "htdemucs":
        command.insert(3, "--two-stems")
        command.insert(4, "vocals")

    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Demucs failed: {e}")

    # Find output folder generated by Demucs
    for root, dirs, files in os.walk(output_dir):
        for d in dirs:
            if d.startswith(model):
                return os.path.join(output_dir, d)

    raise RuntimeError("Demucs output folder not found.")
